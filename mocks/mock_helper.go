// Code generated by MockGen. DO NOT EDIT.
// Source: gokul.go/pkg/helper/interface (interfaces: Helper)

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"gokul.go/pkg/domain"
	models "gokul.go/pkg/utils/models"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// AddOrderProducts implements interfaces.OrderRepository.
func (*MockHelper) AddOrderProducts(order_id int, cart []models.GetCart) error {
	panic("unimplemented")
}

// AdminOrders implements interfaces.OrderRepository.
func (*MockHelper) AdminOrders(status string) ([]domain.OrderDetails, error) {
	panic("unimplemented")
}

// CancelOrder implements interfaces.OrderRepository.
func (*MockHelper) CancelOrder(id int) error {
	panic("unimplemented")
}

// CreateNewWallet implements interfaces.OrderRepository.
func (*MockHelper) CreateNewWallet(userID int) (int, error) {
	panic("unimplemented")
}

// EditOrderStatus implements interfaces.OrderRepository.
func (*MockHelper) EditOrderStatus(status string, id int) error {
	panic("unimplemented")
}

// FindWalletIdFromUserID implements interfaces.OrderRepository.
func (*MockHelper) FindWalletIdFromUserID(userId int) (int, error) {
	panic("unimplemented")
}

// GetOrderDetails implements interfaces.OrderRepository.
func (*MockHelper) GetOrderDetails(orderID uint) (domain.Order, error) {
	panic("unimplemented")
}

// GetOrderDetailsByID implements interfaces.OrderRepository.
func (*MockHelper) GetOrderDetailsByID(orderID uint) (domain.UserorderResponse, error) {
	panic("unimplemented")
}

// GetOrders implements interfaces.OrderRepository.
func (*MockHelper) GetOrders(id int) ([]domain.Order, error) {
	panic("unimplemented")
}

// GetOrdersByStatus implements interfaces.OrderRepository.
func (*MockHelper) GetOrdersByStatus(status string) ([]domain.Order, error) {
	panic("unimplemented")
}

// OrderItems implements interfaces.OrderRepository.
func (*MockHelper) OrderItems(userid int, addressid int, paymentid int, total float64) (int, error) {
	panic("unimplemented")
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// AddImageToS3 mocks base method.
func (m *MockHelper) AddImageToS3(arg0 *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImageToS3", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddImageToS3 indicates an expected call of AddImageToS3.
func (mr *MockHelperMockRecorder) AddImageToS3(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImageToS3", reflect.TypeOf((*MockHelper)(nil).AddImageToS3), arg0)
}

// GenerateRefferalCode mocks base method.
func (m *MockHelper) GenerateRefferalCode() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefferalCode")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefferalCode indicates an expected call of GenerateRefferalCode.
func (mr *MockHelperMockRecorder) GenerateRefferalCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefferalCode", reflect.TypeOf((*MockHelper)(nil).GenerateRefferalCode))
}

// GenerateTokenAdmin mocks base method.
func (m *MockHelper) GenerateTokenAdmin(arg0 models.AdminDetailsResponse) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenAdmin", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenAdmin indicates an expected call of GenerateTokenAdmin.
func (mr *MockHelperMockRecorder) GenerateTokenAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenAdmin", reflect.TypeOf((*MockHelper)(nil).GenerateTokenAdmin), arg0)
}

// GenerateTokenClients mocks base method.
func (m *MockHelper) GenerateTokenClients(arg0 models.UserDeatilsResponse) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenClients", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenClients indicates an expected call of GenerateTokenClients.
func (mr *MockHelperMockRecorder) GenerateTokenClients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenClients", reflect.TypeOf((*MockHelper)(nil).GenerateTokenClients), arg0)
}

// TwilioSendOTP mocks base method.
func (m *MockHelper) TwilioSendOTP(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwilioSendOTP", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TwilioSendOTP indicates an expected call of TwilioSendOTP.
func (mr *MockHelperMockRecorder) TwilioSendOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioSendOTP", reflect.TypeOf((*MockHelper)(nil).TwilioSendOTP), arg0, arg1)
}

// TwilioSetup mocks base method.
func (m *MockHelper) TwilioSetup(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TwilioSetup", arg0, arg1)
}

// TwilioSetup indicates an expected call of TwilioSetup.
func (mr *MockHelperMockRecorder) TwilioSetup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioSetup", reflect.TypeOf((*MockHelper)(nil).TwilioSetup), arg0, arg1)
}

// TwilioVerifyOTP mocks base method.
func (m *MockHelper) TwilioVerifyOTP(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwilioVerifyOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TwilioVerifyOTP indicates an expected call of TwilioVerifyOTP.
func (mr *MockHelperMockRecorder) TwilioVerifyOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioVerifyOTP", reflect.TypeOf((*MockHelper)(nil).TwilioVerifyOTP), arg0, arg1, arg2)
}
