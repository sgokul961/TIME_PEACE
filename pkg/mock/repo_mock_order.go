// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/order.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gokul.go/pkg/domain"
	models "gokul.go/pkg/utils/models"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrderProducts mocks base method.
func (m *MockOrderRepository) AddOrderProducts(order_id int, cart []models.GetCart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderProducts", order_id, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderProducts indicates an expected call of AddOrderProducts.
func (mr *MockOrderRepositoryMockRecorder) AddOrderProducts(order_id, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderProducts", reflect.TypeOf((*MockOrderRepository)(nil).AddOrderProducts), order_id, cart)
}

// AdminOrders mocks base method.
func (m *MockOrderRepository) AdminOrders(status string) ([]domain.OrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrders", status)
	ret0, _ := ret[0].([]domain.OrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminOrders indicates an expected call of AdminOrders.
func (mr *MockOrderRepositoryMockRecorder) AdminOrders(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrders", reflect.TypeOf((*MockOrderRepository)(nil).AdminOrders), status)
}

// CancelOrder mocks base method.
func (m *MockOrderRepository) CancelOrder(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderRepositoryMockRecorder) CancelOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrder), id)
}

// CreateNewWallet mocks base method.
func (m *MockOrderRepository) CreateNewWallet(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewWallet", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewWallet indicates an expected call of CreateNewWallet.
func (mr *MockOrderRepositoryMockRecorder) CreateNewWallet(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewWallet", reflect.TypeOf((*MockOrderRepository)(nil).CreateNewWallet), userID)
}

// EditOrderStatus mocks base method.
func (m *MockOrderRepository) EditOrderStatus(status string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrderStatus", status, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrderStatus indicates an expected call of EditOrderStatus.
func (mr *MockOrderRepositoryMockRecorder) EditOrderStatus(status, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).EditOrderStatus), status, id)
}

// FindWalletIdFromUserID mocks base method.
func (m *MockOrderRepository) FindWalletIdFromUserID(userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWalletIdFromUserID", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWalletIdFromUserID indicates an expected call of FindWalletIdFromUserID.
func (mr *MockOrderRepositoryMockRecorder) FindWalletIdFromUserID(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWalletIdFromUserID", reflect.TypeOf((*MockOrderRepository)(nil).FindWalletIdFromUserID), userId)
}

// GetOrderDetails mocks base method.
func (m *MockOrderRepository) GetOrderDetails(orderID uint) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetails", orderID)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetails indicates an expected call of GetOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetails(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetails), orderID)
}

// GetOrderDetailsByID mocks base method.
func (m *MockOrderRepository) GetOrderDetailsByID(orderID uint) (domain.UserorderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetailsByID", orderID)
	ret0, _ := ret[0].(domain.UserorderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetailsByID indicates an expected call of GetOrderDetailsByID.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetailsByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetailsByID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetailsByID), orderID)
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(id int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", id)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), id)
}

// GetOrdersByStatus mocks base method.
func (m *MockOrderRepository) GetOrdersByStatus(status string) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByStatus", status)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByStatus indicates an expected call of GetOrdersByStatus.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByStatus", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByStatus), status)
}

// OrderItems mocks base method.
func (m *MockOrderRepository) OrderItems(userid, addressid, paymentid int, total float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderItems", userid, addressid, paymentid, total)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderItems indicates an expected call of OrderItems.
func (mr *MockOrderRepositoryMockRecorder) OrderItems(userid, addressid, paymentid, total interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderItems", reflect.TypeOf((*MockOrderRepository)(nil).OrderItems), userid, addressid, paymentid, total)
}
